/**

@author Steven Storkson and Ryan Reistroffer
*/
public class GUISimulator extends javax.swing.JFrame
{
   private Simulation newSim = new Simulation();
   /**
   Creates new form GUISimulator
   it also updates the text fields of txtCurrent, txtNumWaiting, and
   txtAurcraftTakeoff to zero or nothing.
   */
   public GUISimulator()
   {
      initComponents();
      txtCurrent.setText(Integer.toString(newSim.getCurrentTime()));
      txtNumWaiting.setText("0");
      txtAircraftTakeoff.setText(" ");
      
      
   }

   /**
    This method is called from within the constructor to initialize the form.
    WARNING: Do NOT modify this code. The content of this method is always
    regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jLabel1 = new javax.swing.JLabel();
      btnDeparture = new javax.swing.JButton();
      btnTakeoff = new javax.swing.JButton();
      btnTimeUnit = new javax.swing.JButton();
      btnStat = new javax.swing.JButton();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      txtCurrent = new javax.swing.JTextField();
      txtAircraftTakeoff = new javax.swing.JTextField();
      txtNumWaiting = new javax.swing.JTextField();
      jScrollPane1 = new javax.swing.JScrollPane();
      outputArea = new javax.swing.JTextArea();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("Program 4 Simulator");
      setPreferredSize(new java.awt.Dimension(500, 600));

      jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
      jLabel1.setText("Aircraft Departure Simulator");

      btnDeparture.setText("Departure");
      btnDeparture.setName("btnDepart"); // NOI18N
      btnDeparture.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            btnDepartureActionPerformed(evt);
         }
      });

      btnTakeoff.setText("Takeoff");
      btnTakeoff.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            btnTakeoffActionPerformed(evt);
         }
      });

      btnTimeUnit.setText("+1 Time Unit");
      btnTimeUnit.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            btnTimeUnitActionPerformed(evt);
         }
      });

      btnStat.setText("Statistics");
      btnStat.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            btnStatActionPerformed(evt);
         }
      });

      jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
      jLabel2.setText("Current Time");

      jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
      jLabel3.setText("Aircraft to take off");

      jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
      jLabel4.setText("Number of Aircraft Waiting");

      outputArea.setColumns(20);
      outputArea.setRows(5);
      jScrollPane1.setViewportView(outputArea);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(31, 31, 31)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(btnStat, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(btnTakeoff, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(btnDeparture, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(btnTimeUnit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jLabel3))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(txtAircraftTakeoff, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                           .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(txtNumWaiting)))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel2)
                           .addGroup(layout.createSequentialGroup()
                              .addComponent(txtCurrent)
                              .addGap(77, 77, 77))))))
               .addGroup(layout.createSequentialGroup()
                  .addGap(21, 21, 21)
                  .addComponent(jLabel1)))
            .addContainerGap(64, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(37, 37, 37)
            .addComponent(jLabel1)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(43, 43, 43)
                  .addComponent(btnTakeoff)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(btnDeparture)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(btnTimeUnit)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(btnStat))
               .addGroup(layout.createSequentialGroup()
                  .addGap(5, 5, 5)
                  .addComponent(jLabel2)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(txtCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jLabel3)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(txtAircraftTakeoff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel4)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(txtNumWaiting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(65, 65, 65)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents
   /**
   This takes the event of the button pressed and checks if takeoff is 
   successful, if it is, it will print out information to the text area
   and update the queue.  It also checks for the case of a queue of 0 
   and it determinds the output of the text areas to either zero or nothing,
   or the values that are of the CurrentAircraft info and number waiting
   in the queue
   @param evt 
   */
   private void btnTakeoffActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnTakeoffActionPerformed
   {//GEN-HEADEREND:event_btnTakeoffActionPerformed
      if(newSim.TakeOff())
      {
         outputArea.append(newSim.getTakeOffInfo() + "\n\r");
         if(newSim.getQueueSize() == 0)
         {
            newSim.updateQueue();
            txtAircraftTakeoff.setText(" ");
            txtNumWaiting.setText("0");
            
         }
         else
         {
            newSim.updateQueue();
            txtAircraftTakeoff.setText(newSim.getCurrentacInfo());
            txtNumWaiting.setText(Integer.toString(newSim.getQueueSize()));
         }
         txtCurrent.setText(Integer.toString(newSim.getCurrentTime()));
      }
      else
         outputArea.append("No aircraft taking off @time " 
                            + newSim.getCurrentTime() + "\n\r");
   }//GEN-LAST:event_btnTakeoffActionPerformed
   /**
   This method checks for an event of the departure button pressed.  It checks
   to see if a plan can depart and if it can, it prints out the information
   and sets the current time, the number waiting, and the aircraft taking off.
   
   @param evt 
   */
   private void btnDepartureActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDepartureActionPerformed
   {//GEN-HEADEREND:event_btnDepartureActionPerformed
      if(newSim.Departure())
      {
         outputArea.append("An aircraft entered the runway @time " 
                           + newSim.getCurrentTime() + "." 
                           + " Number waiting in the queue " 
                           + newSim.getQueueSize() + "\n\r");
         txtCurrent.setText(Integer.toString(newSim.getCurrentTime()));
      }
      else
         outputArea.append("Aircraft had to wait at the gate because the "
                           + "line was full at time " 
                           + newSim.getCurrentTime() + ". \n\r");
      txtNumWaiting.setText(Integer.toString(newSim.getQueueSize()));
      txtAircraftTakeoff.setText(newSim.getCurrentacInfo());
      
   }//GEN-LAST:event_btnDepartureActionPerformed
   /**
   When the TimeUnit button is pressed it will increment up the time by 1 unit
   and then will print out to the text area the current time and then 
   sets the current time to the new updated time.
   @param evt 
   */
   private void btnTimeUnitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnTimeUnitActionPerformed
   {//GEN-HEADEREND:event_btnTimeUnitActionPerformed
      newSim.increaseTime(1);
      outputArea.append("Time updated by " + 1 + " time units; current time " 
                        + "is " + newSim.getCurrentTime() + ". \n\r");
      txtCurrent.setText(Integer.toString(newSim.getCurrentTime()));
   }//GEN-LAST:event_btnTimeUnitActionPerformed
   /** 
   When the button StatAction is pressed it will calculate the average wait
   time of the planes that waited.  if there are no plane that waited, it
   gives an output of 0.0. 
   This will also give all the stats of how many aircraft waited, didnt wait,
   tookoff, and the number that didnt takeoff.
   @param evt 
   */
   private void btnStatActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnStatActionPerformed
   {//GEN-HEADEREND:event_btnStatActionPerformed
      double aveWT = 0.0d;
      if (newSim.getacWaited() != 0)
         aveWT =  newSim.getWaitTime() / (double) newSim.getacWaited();
      outputArea.append("\n\r");
      outputArea.append("The average wait time for aircraft that finished "
                         +"waiting is " + aveWT + "." + "\n\r");
      outputArea.append("The total wait time is " + newSim.getWaitTime() 
                         + "." + "\n\r");
      outputArea.append("The number of aircraft that took off is " 
                         + newSim.gettookOff() + "." + "\n\r");
      outputArea.append("The number of aircraft did not have to wait is " 
                         + newSim.getNoWait() + "." + "\n\r");
      outputArea.append("\n\r");
      
   }//GEN-LAST:event_btnStatActionPerformed

   /**
    @param args the command line arguments
    */
   public static void main(String args[])
   {
      /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try
      {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
         {
            if ("Nimbus".equals(info.getName()))
            {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      }
      catch (ClassNotFoundException ex)
      {
         java.util.logging.Logger.getLogger(GUISimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (InstantiationException ex)
      {
         java.util.logging.Logger.getLogger(GUISimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (IllegalAccessException ex)
      {
         java.util.logging.Logger.getLogger(GUISimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (javax.swing.UnsupportedLookAndFeelException ex)
      {
         java.util.logging.Logger.getLogger(GUISimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable()
      {
         public void run()
         {
            new GUISimulator().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnDeparture;
   private javax.swing.JButton btnStat;
   private javax.swing.JButton btnTakeoff;
   private javax.swing.JButton btnTimeUnit;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTextArea outputArea;
   private javax.swing.JTextField txtAircraftTakeoff;
   private javax.swing.JTextField txtCurrent;
   private javax.swing.JTextField txtNumWaiting;
   // End of variables declaration//GEN-END:variables
}
