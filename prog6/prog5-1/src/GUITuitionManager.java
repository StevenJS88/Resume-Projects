import java.io.*;
import javax.swing.ButtonGroup;
import javax.swing.JList;
import java.util.*;
/**
This class is the user interface that interacts with the Tuition Simulator.
It determines whether a student can be added or not and then puts them in a
displayed list.  This list can be changed.  IT can be deleted, added to
and modify the selected students Credit hours.  IT also will clear the whole
program and also, print out the back-end list in the Linked List.
@author Ryan Reistroffer, Steven Storkson
*/
public class GUITuitionManager extends javax.swing.JFrame
{
   private final int INTPARTCRED = 9;
   private final int FULLCREDIT = 12;
   private Vector Students;
   private TuitionSimulation tuSim;
   ButtonGroup group = new ButtonGroup();
   
   /**
   Creates new form GUITuitionManager and sets the components to the
   default settings for starting the program. It also puts buttons in a 
   group.
   */
   public GUITuitionManager()
   {
      initComponents();
      scholarshipText.setEnabled(false);
      scholarshipText.setText("0");
      tuSim = new TuitionSimulation();
      scholarship.setEnabled(false);
      triState.setEnabled(false);
      exchange.setEnabled(false);
      group.add(inState);
      group.add(outState);
      group.add(international);
      Students = new Vector<String>();
   }

   /**
    This method is called from within the constructor to initialize the form.
    WARNING: Do NOT modify this code. The content of this method is always
    regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jDialog1 = new javax.swing.JDialog();
      jDialog2 = new javax.swing.JDialog();
      jDialog3 = new javax.swing.JDialog();
      jDialog4 = new javax.swing.JDialog();
      jDialog5 = new javax.swing.JDialog();
      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      buttonGroup3 = new javax.swing.ButtonGroup();
      buttonGroup4 = new javax.swing.ButtonGroup();
      buttonGroup5 = new javax.swing.ButtonGroup();
      jScrollPane1 = new javax.swing.JScrollPane();
      printArea = new javax.swing.JTextArea();
      jLabel1 = new javax.swing.JLabel();
      stuID = new javax.swing.JTextField();
      jLabel2 = new javax.swing.JLabel();
      name = new javax.swing.JTextField();
      jLabel3 = new javax.swing.JLabel();
      creditHours = new javax.swing.JTextField();
      jLabel4 = new javax.swing.JLabel();
      clearForm = new javax.swing.JButton();
      Add = new javax.swing.JButton();
      jLabel6 = new javax.swing.JLabel();
      PrintList = new javax.swing.JButton();
      jSeparator1 = new javax.swing.JSeparator();
      jSeparator2 = new javax.swing.JSeparator();
      Delete = new javax.swing.JButton();
      jLabel5 = new javax.swing.JLabel();
      jPanel1 = new javax.swing.JPanel();
      inState = new javax.swing.JRadioButton();
      outState = new javax.swing.JRadioButton();
      international = new javax.swing.JRadioButton();
      jPanel2 = new javax.swing.JPanel();
      scholarship = new javax.swing.JCheckBox();
      triState = new javax.swing.JCheckBox();
      exchange = new javax.swing.JCheckBox();
      scholarshipText = new javax.swing.JTextField();
      scholarshipLabel = new javax.swing.JLabel();
      UpdateStudent = new javax.swing.JButton();
      jScrollPane2 = new javax.swing.JScrollPane();
      jList = new javax.swing.JList();
      jLabel7 = new javax.swing.JLabel();

      javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
      jDialog1.getContentPane().setLayout(jDialog1Layout);
      jDialog1Layout.setHorizontalGroup(
         jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
      );
      jDialog1Layout.setVerticalGroup(
         jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
      );

      javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
      jDialog2.getContentPane().setLayout(jDialog2Layout);
      jDialog2Layout.setHorizontalGroup(
         jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
      );
      jDialog2Layout.setVerticalGroup(
         jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
      );

      javax.swing.GroupLayout jDialog3Layout = new javax.swing.GroupLayout(jDialog3.getContentPane());
      jDialog3.getContentPane().setLayout(jDialog3Layout);
      jDialog3Layout.setHorizontalGroup(
         jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
      );
      jDialog3Layout.setVerticalGroup(
         jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
      );

      javax.swing.GroupLayout jDialog4Layout = new javax.swing.GroupLayout(jDialog4.getContentPane());
      jDialog4.getContentPane().setLayout(jDialog4Layout);
      jDialog4Layout.setHorizontalGroup(
         jDialog4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
      );
      jDialog4Layout.setVerticalGroup(
         jDialog4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
      );

      javax.swing.GroupLayout jDialog5Layout = new javax.swing.GroupLayout(jDialog5.getContentPane());
      jDialog5.getContentPane().setLayout(jDialog5Layout);
      jDialog5Layout.setHorizontalGroup(
         jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
      );
      jDialog5Layout.setVerticalGroup(
         jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
      );

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      addMouseListener(new java.awt.event.MouseAdapter()
      {
         public void mousePressed(java.awt.event.MouseEvent evt)
         {
            formMousePressed(evt);
         }
         public void mouseClicked(java.awt.event.MouseEvent evt)
         {
            formMouseClicked(evt);
         }
      });

      printArea.setColumns(20);
      printArea.setRows(5);
      jScrollPane1.setViewportView(printArea);

      jLabel1.setText("Student ID#:");

      jLabel2.setText("Name:");

      name.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            nameActionPerformed(evt);
         }
      });

      jLabel3.setText("Number of Credit Hours Student is Taking:");

      creditHours.addInputMethodListener(new java.awt.event.InputMethodListener()
      {
         public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt)
         {
            creditHoursInputMethodTextChanged(evt);
         }
         public void caretPositionChanged(java.awt.event.InputMethodEvent evt)
         {
         }
      });
      creditHours.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            creditHoursActionPerformed(evt);
         }
      });

      jLabel4.setText("Enrollment Status");

      clearForm.setText("Clear");
      clearForm.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            clearFormActionPerformed(evt);
         }
      });

      Add.setText("Add");
      Add.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            AddActionPerformed(evt);
         }
      });

      jLabel6.setText("Student Discounts");

      PrintList.setText("Calculate and Print All");
      PrintList.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            PrintListActionPerformed(evt);
         }
      });

      Delete.setText("Delete");
      Delete.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            DeleteActionPerformed(evt);
         }
      });

      jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

      inState.setText("In-state");
      inState.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            inStateActionPerformed(evt);
         }
      });

      outState.setText("Out-state");
      outState.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            outStateActionPerformed(evt);
         }
      });

      international.setText("International");
      international.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            internationalActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(inState)
               .addComponent(outState)
               .addComponent(international))
            .addGap(0, 31, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(inState)
            .addGap(7, 7, 7)
            .addComponent(outState)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(international)
            .addContainerGap(12, Short.MAX_VALUE))
      );

      jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

      scholarship.setText("Scholarship");
      scholarship.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            scholarshipActionPerformed(evt);
         }
      });

      triState.setText("Tri-state");
      triState.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            triStateActionPerformed(evt);
         }
      });

      exchange.setText("Exchange");
      exchange.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            exchangeActionPerformed(evt);
         }
      });

      scholarshipLabel.setText("Amount:");

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(triState)
                     .addComponent(exchange))
                  .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(scholarship)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                  .addComponent(scholarshipLabel)
                  .addGap(18, 18, 18)
                  .addComponent(scholarshipText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(58, 58, 58))))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(scholarship)
               .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(scholarshipText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(scholarshipLabel)))
            .addGap(9, 9, 9)
            .addComponent(triState)
            .addGap(6, 6, 6)
            .addComponent(exchange)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      UpdateStudent.setText("Update");
      UpdateStudent.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            UpdateStudentActionPerformed(evt);
         }
      });

      jList.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
      jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
      jList.setToolTipText("");
      jList.setAutoscrolls(false);
      jList.setBounds(new java.awt.Rectangle(0, 0, 1, 5));
      jScrollPane2.setViewportView(jList);

      jLabel7.setText("Enter Credit hours & Press Enter");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(22, 22, 22)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(UpdateStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(clearForm, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                     .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jScrollPane1)
                           .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13))))
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1)
                        .addGap(20, 20, 20)
                        .addComponent(stuID, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(jLabel2)
                        .addGap(15, 15, 15)
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(creditHours, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(145, 145, 145)
                        .addComponent(jLabel6))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(PrintList, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)))
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addGap(6, 6, 6))
         .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
         .addComponent(jSeparator1)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(stuID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGroup(layout.createSequentialGroup()
                  .addGap(6, 6, 6)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel1)
                     .addComponent(jLabel2))))
            .addGap(16, 16, 16)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel3)
               .addComponent(creditHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel7))
            .addGap(14, 14, 14)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(12, 12, 12)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel4)
               .addComponent(jLabel6))
            .addGap(4, 4, 4)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addGroup(layout.createSequentialGroup()
                  .addGap(40, 40, 40)
                  .addComponent(jLabel5))
               .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, Short.MAX_VALUE))
            .addGap(12, 12, 12)
            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(Delete)
               .addComponent(Add)
               .addComponent(UpdateStudent)
               .addComponent(clearForm))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(PrintList)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void nameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nameActionPerformed
   {//GEN-HEADEREND:event_nameActionPerformed
      
   }//GEN-LAST:event_nameActionPerformed
   /**
   When the user enters a number for credits hours and presses return or enter
   this method checks to see if inState is selected and will enable or
   disable the scholarship check box.
   @param evt 
   */
   private void creditHoursActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_creditHoursActionPerformed
   {//GEN-HEADEREND:event_creditHoursActionPerformed
      
      try
      {
         if(inState.isSelected())
            if(Integer.parseInt(creditHours.getText()) >= 12)
               scholarship.setEnabled(true);
            else
               scholarship.setEnabled(false);
      }
      catch(Exception e)
      {
         return;
      }
   }//GEN-LAST:event_creditHoursActionPerformed
   /**
   When the Scholarship check box is selected, it checks if it is the first or
   second time the check box is pressed and disables the Scholarship
   amount text area.
   @param evt 
   */
   private void scholarshipActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_scholarshipActionPerformed
   {//GEN-HEADEREND:event_scholarshipActionPerformed
      scholarshipText.setEnabled(true);
      if(!scholarship.isSelected())
         scholarshipText.setEnabled(false);
      
   }//GEN-LAST:event_scholarshipActionPerformed

   private void triStateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_triStateActionPerformed
   {//GEN-HEADEREND:event_triStateActionPerformed
      
   }//GEN-LAST:event_triStateActionPerformed

   private void exchangeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exchangeActionPerformed
   {//GEN-HEADEREND:event_exchangeActionPerformed
      
   }//GEN-LAST:event_exchangeActionPerformed

  /**
   Check if the inputs of ID, Name, Credit Hours and Enrollment
   status are selected. It then determines if the inputs are correct or
   gives an error message.  If Scholarship or International are selected,
   it will check if the credit hours are correct for such selections and
   give error messages if it is incorrect.
   @param evt 
   */
   private void AddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AddActionPerformed
   {//GEN-HEADEREND:event_AddActionPerformed
      
      if (enrollCheck() == -1)
         return;
      if (!checkInput().equals(new String()))
      {
         printArea.append("\n" + "Enrollment unsuccessful. The following "
                          + "inputs were not filled in properly. \n");
         printArea.append(checkInput() + "\n");
      }
      else
      {
         CreateStudent();
         if(tuSim.Enroll() != -1)
         {
            printArea.append("Student added. \n");
            updateVector();
         }
         else
            printArea.append("Student already exists. \n");
      }
   }//GEN-LAST:event_AddActionPerformed
   /**
   Clears the forms selections so the user can put in new ID, NAME, Credit
   hours and Enrollment Status.  It also clears the scholarship amount, the
   jlist area, and the text area for output of the Linked List
   @param evt 
   */
   private void clearFormActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearFormActionPerformed
   {//GEN-HEADEREND:event_clearFormActionPerformed
      stuID.setText(new String());
      name.setText(new String());
      creditHours.setText(new String());
      inState.setVisible(true);
      outState.setVisible(true);
      international.setVisible(true);
      scholarship.setEnabled(false);
      scholarship.setSelected(false);
      scholarship.setVisible(true);
      triState.setEnabled(false);
      triState.setSelected(false);
      triState.setVisible(true);
      exchange.setEnabled(false);
      exchange.setSelected(false);
      exchange.setVisible(true);
      scholarshipLabel.setVisible(true);
      scholarshipText.setEnabled(false); 
      scholarshipText.setVisible(true);
      scholarshipText.setText("0");
      group.clearSelection();
      tuSim.clearArray();
      printArea.setText(null);
      Students = new Vector<String>();
      jList = new JList<String>(Students);
      jScrollPane2.updateUI();
      jScrollPane2.setViewportView(jList);
   }//GEN-LAST:event_clearFormActionPerformed
  /**
   This method checks if the print list is equal to null, if it is not, it 
   will print the student list.  if it is null, it will print that the list
   is empty.
   @param evt 
   */
   private void PrintListActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_PrintListActionPerformed
   {//GEN-HEADEREND:event_PrintListActionPerformed
      if(tuSim.PrintList() != null)
         printArea.append(tuSim.PrintList());
      else
         printArea.append("Student list is empty. \n");
   }//GEN-LAST:event_PrintListActionPerformed

  /**
   This checks if the student is selected, if not it gives an error.  If the 
   student is selected, it removes it from the jlist and then removes the 
   student from the LinkedList. IT gives a notice of removal.
   @param evt 
   */
   private void DeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_DeleteActionPerformed
   {//GEN-HEADEREND:event_DeleteActionPerformed
      if(jList.isSelectionEmpty())
         printArea.append("Student Not Selected! \n");
      else
      {
         for(int i = 0; i < Students.size(); i++)
         {
            if(jList.isSelectedIndex(i))
            {
               Object obj = Students.remove(i);
               RemoveStudent(obj.toString());
               printArea.append("Student Removed. \n");
            }
         }
      }
   }//GEN-LAST:event_DeleteActionPerformed

   private void formMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseClicked
   {//GEN-HEADEREND:event_formMouseClicked
      
   }//GEN-LAST:event_formMouseClicked

   private void formMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMousePressed
   {//GEN-HEADEREND:event_formMousePressed
      
   }//GEN-LAST:event_formMousePressed
   /**
   This method checks if the credit hours are 12 or greater.  It will then
   enable the scholarship check box.  if not, it will make sure they are 
   deselected and disabled so the user cannot put in incorrect information.
   It also makes sure the other check boxes are unselected and disabled.
   @param evt 
   */
   private void inStateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_inStateActionPerformed
   {//GEN-HEADEREND:event_inStateActionPerformed
      try
      {
         if (Integer.parseInt(creditHours.getText()) >= FULLCREDIT)
            scholarship.setEnabled(true);
         else if (unenCheck() != 1)
         {  
            scholarship.setEnabled(false);
            scholarship.setSelected(false);
            scholarshipText.setText("0");
            scholarshipText.setEnabled(false); 
         }
      }
      catch (Exception e)
      {
         if(name.equals("") && stuID.equals("") )
         {
            printArea.append("Invalid Input in Credit Hours. \n");
            printArea.append("Put a valid input in Credit Hours and Select "
                             + "In-State student status again. \n");
         }
      }
      triState.setEnabled(false);
      triState.setSelected(false);
      exchange.setEnabled(false);
      exchange.setSelected(false);
   }//GEN-LAST:event_inStateActionPerformed
   /**
   This method makes the tristate student discount enabled and makes the 
   scholarship check box and the scholarship amount area disabled and unchecked
   It also disables exchange.
   @param evt 
   */
   private void outStateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_outStateActionPerformed
   {//GEN-HEADEREND:event_outStateActionPerformed
      scholarship.setEnabled(false);
      triState.setEnabled(true);
      exchange.setEnabled(false);
      exchange.setSelected(false);
      scholarship.setSelected(false);
      scholarshipText.setText("0");
      scholarshipText.setEnabled(false);
      
   }//GEN-LAST:event_outStateActionPerformed
   /**
   This method disables scholarship and Tristate check boxes.  It also 
   deselects tristate and scholarship, to make sure the user doesn't input
   incorrect information.
   @param evt 
   */
   private void internationalActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_internationalActionPerformed
   {//GEN-HEADEREND:event_internationalActionPerformed
      scholarship.setEnabled(false);
      scholarship.setSelected(false);
      triState.setEnabled(false);
      triState.setSelected(false);
      exchange.setEnabled(true);
      scholarship.setSelected(false);
      scholarshipText.setText("0");
      scholarshipText.setEnabled(false);
   }//GEN-LAST:event_internationalActionPerformed

   private void creditHoursInputMethodTextChanged(java.awt.event.InputMethodEvent evt)//GEN-FIRST:event_creditHoursInputMethodTextChanged
   {//GEN-HEADEREND:event_creditHoursInputMethodTextChanged
      
   }//GEN-LAST:event_creditHoursInputMethodTextChanged
   /**
   This button when pressed will check if a member of the jList is selected.
   if not selected it will give an error. If it is selected, it will find
   the student selected and take the string of the information and parse
   it into name, id, student type, and extra information about student status.
   then it will call the StudentStats() to determine if it is valid to process
   the update.
   @param evt 
   */
   private void UpdateStudentActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_UpdateStudentActionPerformed
   {//GEN-HEADEREND:event_UpdateStudentActionPerformed
      if(jList.isSelectionEmpty())
         printArea.append("Student Not Selected! \n");
      else
      {
         for(int i = 0; i < Students.size(); i++)
         {
            if(jList.isSelectedIndex(i))
            {
               Object obj = Students.elementAt(i);
               StringTokenizer token = new StringTokenizer(obj.toString(), " ");
               String names = token.nextToken();
               String id = token.nextToken();
               String stuType = token.nextToken();
               String info = token.nextToken();
               int credits = Integer.parseInt(creditHours.getText());
               StudentStats(names, id, stuType, info, credits);
            }
         }
      }
   }//GEN-LAST:event_UpdateStudentActionPerformed

   /**
   This method will check what kind of instance of Student is being called for
   an update to their credit hours.  It will then determine if they can update
   and then make an instance in the that student and update the credits with
   a call to the TuitionSimulation's updateCredits() method.  It will
   then update the vector list and then update the jList User Interface.
   @param name
   @param id
   @param type
   @param info
   @param credit 
   */
   private void StudentStats(String name, String id, String type, String info,
         int credit)
   {
      if(credit <= 0)
      {
         printArea.append("Credit Hours less than or equal to zero. \n "
               + "Enter a valid amount for Credit hours. \n ");
         return;
      }
      switch (type)
      {
         case "In-state,":
         case "In-state":
            if(info.equals("scholarship,"))
            {
               if(credit >= FULLCREDIT)
                  tuSim.inState(id, name, credit, 100);
               else
               {
                  printArea.append("Credit hours less than 12, which is "
                        + "required for scholarship receiveing students. \n");
                  return;
               }
            }
            else
            {
               tuSim.inState(id, name, credit, 0);
            }  break;
         case "Out-Of-State":
         case "Out-Of-State,":
            if (info.equals("Tristate,"))
               tuSim.outStu(id, name, credit, true);
            else
               tuSim.outStu(id, name, credit, false);
            break;
         default:
            if (credit < INTPARTCRED)
            {
               printArea.append("Credit hours less than 9, which is required"
                     + " for International Students. \n");
            return;
            }  if(info.equals("exchange,"))
               tuSim.interStu(id, name, credit, true);
            else
               tuSim.interStu(id, name, credit, false);
            break;
      }
      tuSim.updateCredit();
      updateVector();
   }
   
   /**
   This method checks all of the fields for which are selected on the form
   and makes an instance of the student that meets the criteria.  Otherwise,
   it returns false if there isn't enough information.
   @return true or false
   */
   private boolean CreateStudent()
   {
      if(inState.isSelected())
      {
         if (scholarship.isSelected())
            tuSim.inState(stuID.getText(), name.getText(), 
                  Integer.parseInt(creditHours.getText()), 
                  Integer.parseInt(scholarshipText.getText()));
         else
            tuSim.inState(stuID.getText(), name.getText(), 
                  Integer.parseInt(creditHours.getText()), 0);
         return true;
      }
      else if(outState.isSelected())
      {
         tuSim.outStu(stuID.getText(), name.getText(), 
               Integer.parseInt(creditHours.getText()), 
               triState.isSelected());
         return true;
      }
      else if(international.isSelected())
      {
         tuSim.interStu(stuID.getText(), name.getText(), 
               Integer.parseInt(creditHours.getText()), 
               exchange.isSelected());
         return true;
      }
      else
         return false;
   }
   
   /**
   This method checks to see is the inputs were all filled in properly and
   returns a string telling what they didn't fill in.
   @return A string of the inputs the user forgot to fill in.
   */
   private String checkInput()
   {
      String temp = new String();
      int num = 1;
      try 
      {
         if (!stuID.getText().equals(temp) && stuID.getText() != null || 
             !creditHours.getText().equals(temp) && 
             creditHours.getText() != null )
         {
            Integer.parseInt(stuID.getText());
            num = Integer.parseInt(creditHours.getText());
         }
      }
      catch (Exception e)
      {
         return "Incorrect Input";
      }
      if(name.getText().equals(""))
         temp += "Name left blank.\n";
      if(stuID.getText().equals(""))
         temp += "Student ID number left blank.\n";
      if (creditHours.getText().equals(""))
         temp += "Credit Hours left blank.\n";
      if(!isSelected())
         temp += "Enrollment Status not selected.\n";
      if(num <= 0)
         temp += "Credit Hours Zero or Negative value. \n";
      return temp;
   }
   
   
   /**
   This method will take the string given to it and tokenize it into the 
   student's name and ID# and unenroll the student and updates the Vector
   list and jList's user interface.
   @param info 
   */
   private void RemoveStudent(String info)
   {
      StringTokenizer stuInfo = new StringTokenizer(info, " ");
      String names = stuInfo.nextToken();
      String id = stuInfo.nextToken();
      tuSim.inState(id, names, 12,0);
      tuSim.Unenroll();
      updateVector();
   }
   
   /**
   Checks to see if any of the Enrollment Status check boxes are checked, and
   returns true if any of them are or false if not.
   @return true or false.
   */
   private boolean isSelected()
   {
      if(outState.isSelected() || inState.isSelected() 
         || international.isSelected())
         return true;
      else
            return false;
   }
   
   /**
   This method checks to see if the student ID and name are not left blank. 
   If they are filled in, it checks for invalid data in the ID number to see
   if it is a letter.
   @return -1 if invalid in put, 1 if name or ID are left blank, 0 for 
   normal condition.
   */
   private int unenCheck()
   {
      String temp = new String();
      try 
      {
         if (!stuID.getText().equals(temp)|| !name.getText().equals(temp))
         {
            Integer.getInteger(stuID.getText());
         }
      }
      catch (Exception e)
      {
         return -1;
      }
      int num = 0;
      if(name.getText().equals(new String()))
          num = 1;
      if(stuID.getText().equals(new String()))
         num = 1;
      return num;
   }
   /**
   This method check for if the scholarship is selected and the amount of
   credit hours is incorrect for selecting scholarship.  It will then deselect
   and disable the scholarship if this is the case.  It throws an exception if
   the scholarship amount is less than zero.  It throws a NullPointerException
   if scholarship is check but the scholarship amount is equal to zero.
   @throws IOException
   @throws Exception
   @throws NullPointerException 
   */
   private void scholarshipCheck() throws IOException, Exception, 
         NullPointerException
   {
      if ( Integer.parseInt(creditHours.getText()) < FULLCREDIT && 
            scholarship.isSelected())
         {
            scholarship.setSelected(false);
            scholarship.setEnabled(false);
            scholarshipText.setEnabled(false);
            scholarshipText.setText("0");
            printArea.append("Scholarship selected and Credit Hours less than"
                  + " 12 Credit hours. \nScholarship Deselected. \n");
            throw new IOException();
         }
         if(Integer.parseInt(scholarshipText.getText()) <= -1)
         {
            throw new Exception();
         }
         if(Integer.parseInt(scholarshipText.getText()) == 0 && 
               scholarship.isSelected())
            throw new NullPointerException();
   }
   
   /**
   This method checks if the scholarship is check and calls a method that 
   checks if it is properly filled in.  It also checks if the student is an
   international student and registered for only 8 credit hours, it throws
   an error. This will output text to acknowledge the users mistake
   specifically for the enrollment process.
   @return -1 as Error or 0 as normal
   */
   private int enrollCheck()
   {
      try
      {
         if(scholarship.isSelected())
            scholarshipCheck();
         if(international.isSelected())
            if(Integer.parseInt(creditHours.getText()) < INTPARTCRED)
            {
               printArea.append("Credit Hours is less than 9 and "
                     + "International Student status Selected.\n");
               throw new IOException();
            }
      }
      catch(IOException e)
      {
         printArea.append("Enrollment unsuccessful. \n");
         return -1;
      }
      catch (NullPointerException e)
      {
         printArea.append("Scholarship selected and amount given is zero. "
               + "Reenter your scholarship amount. \n");
         return -1;
      }
      catch(Exception e)
      {
         printArea.append("Incorrect Input for Scholarship amount. \n");
         return -1;
      }
      return 0;
   }
   
   /**
   This method sees if the simulation has students, if it does it takes the
   student lists string from the printList() method of the TuitionSimulator
   and It then tokenizes the list and updates the vector to update the 
   jList and it's userInterface.
   */
   private void updateVector()
   {
      if(tuSim.PrintList() != null)
      {
         StringTokenizer stdin = new StringTokenizer(tuSim.PrintList(), "\n");
         if( stdin.hasMoreTokens())
         {
            String student = stdin.nextToken();
            Students.removeAllElements();
            Students.add(student);
            while (stdin.hasMoreTokens())
            {
               student = stdin.nextToken();
               Students.add(student);
            }
            jList = new JList<String>(Students);
            jScrollPane2.updateUI();
            jScrollPane2.setViewportView(jList);
         }
         
      }
      else
         {
            Students = new Vector<String>();
            jList = new JList<String>(Students);
            jScrollPane2.updateUI();
            jScrollPane2.setViewportView(jList);
         }
      
   }
   
   /**
    @param args the command line arguments
    */
   public static void main(String args[])
   {
      /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try
      {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
         {
            if ("Nimbus".equals(info.getName()))
            {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      }
      catch (ClassNotFoundException ex)
      {
         java.util.logging.Logger.getLogger(GUITuitionManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (InstantiationException ex)
      {
         java.util.logging.Logger.getLogger(GUITuitionManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (IllegalAccessException ex)
      {
         java.util.logging.Logger.getLogger(GUITuitionManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (javax.swing.UnsupportedLookAndFeelException ex)
      {
         java.util.logging.Logger.getLogger(GUITuitionManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable()
      {
         public void run()
         {
            new GUITuitionManager().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton Add;
   private javax.swing.JButton Delete;
   private javax.swing.JButton PrintList;
   private javax.swing.JButton UpdateStudent;
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.ButtonGroup buttonGroup2;
   private javax.swing.ButtonGroup buttonGroup3;
   private javax.swing.ButtonGroup buttonGroup4;
   private javax.swing.ButtonGroup buttonGroup5;
   private javax.swing.JButton clearForm;
   private javax.swing.JTextField creditHours;
   private javax.swing.JCheckBox exchange;
   private javax.swing.JRadioButton inState;
   private javax.swing.JRadioButton international;
   private javax.swing.JDialog jDialog1;
   private javax.swing.JDialog jDialog2;
   private javax.swing.JDialog jDialog3;
   private javax.swing.JDialog jDialog4;
   private javax.swing.JDialog jDialog5;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JList jList;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JSeparator jSeparator2;
   private javax.swing.JTextField name;
   private javax.swing.JRadioButton outState;
   private javax.swing.JTextArea printArea;
   private javax.swing.JCheckBox scholarship;
   private javax.swing.JLabel scholarshipLabel;
   private javax.swing.JTextField scholarshipText;
   private javax.swing.JTextField stuID;
   private javax.swing.JCheckBox triState;
   // End of variables declaration//GEN-END:variables
}
